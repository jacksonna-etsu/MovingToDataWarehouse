--Nathaniel Jackson: I did not work with a team
--Project3, table data population

SET SERVEROUTPUT ON

INSERT INTO PART
SELECT
    c.COMPONENTID, c.PRODUCTNUMBER, m.MANUFACTURERNAME, c.DESCRIPTION, c.LISTPRICE, c.ESTIMATEDCOST
FROM
    BIKE_SHOP.COMPONENT c INNER JOIN
    BIKE_SHOP.MANUFACTURER m ON m.MANUFACTURERID = c.MANUFACTURERID;
/
    
INSERT INTO MODEL 
SELECT ROW_NUMBER() OVER (ORDER BY MODELTYPE) AS MODELID, MODELTYPE
FROM BIKE_SHOP.MODELTYPE;
/

INSERT INTO PAINT
SELECT 
    PAINTID, COLORNAME, COLORSTYLE, COLORLIST, DATEINTRODUCED, DATEDISCONTINUED
FROM BIKE_SHOP.PAINT;
/

     

--Populating the address table.
DECLARE
   CURSOR cCUSTOMER IS
    SELECT c.ADDRESS, ci.CITY, ci.STATE, c.ZIPCODE, ci.COUNTRY
    FROM BIKE_SHOP.CUSTOMER c INNER JOIN
         BIKE_SHOP.CITY ci ON c.CITYID = ci.CITYID;
         
   CURSOR cEMPLOYEE IS
    SELECT e.ADDRESS, ci.CITY, ci.STATE, e.ZIPCODE, ci.COUNTRY
    FROM BIKE_SHOP.EMPLOYEE e INNER JOIN
         BIKE_SHOP.CITY ci ON e.CITYID = ci.CITYID;

   CURSOR cSTORE IS
    SELECT rs.ADDRESS, ci.CITY, ci.STATE, rs.ZIPCODE, ci.COUNTRY
    FROM BIKE_SHOP.RETAILSTORE rs INNER JOIN
         BIKE_SHOP.CITY ci ON rs.CITYID = ci.CITYID;
    
    cSTO cSTORE%ROWTYPE;
    cEMP cEMPLOYEE%ROWTYPE;
    cCUST cCUSTOMER%ROWTYPE;
    i int;                      --a counter
BEGIN
    i := 0;
    FOR cCUST IN cCUSTOMER LOOP
        i := i + 1;
        INSERT INTO ADDRESS VALUES (i, cCUST.ADDRESS, cCUST.CITY, cCUST.STATE, cCUST.ZIPCODE, cCUST.COUNTRY);
    END LOOP;
    FOR cEMP IN cEMPLOYEE LOOP
        i := i + 1;
        INSERT INTO ADDRESS VALUES (i, cEMP.ADDRESS, cEMP.CITY, cEMP.STATE, cEMP.ZIPCODE, cEMP.COUNTRY);
    END LOOP;
    FOR cSTO IN cSTORE LOOP
        i := i + 1;
        INSERT INTO ADDRESS VALUES (i, cSTO.ADDRESS, cSTO.CITY, cSTO.STATE, cSTO.ZIPCODE, cSTO.COUNTRY);
    END LOOP;
    COMMIT;
END;
/

INSERT INTO BICYCLE
SELECT b.SERIALNUMBER, m.MODELID, b.PAINTID, b.FRAMESIZE
FROM BIKE_SHOP.BICYCLE b INNER JOIN
     MODEL m ON b.MODELTYPE = m.MODELNAME;
/
   
INSERT INTO WAREHOUSECUSTOMER  
SELECT c.CUSTOMERID, c.FIRSTNAME || ' ' || c.LASTNAME, c.PHONE, a.ADDRESSID
FROM BIKE_SHOP.CUSTOMER c INNER JOIN
     ADDRESS a ON c.ADDRESS = a.ADDRESS AND c.ZIPCODE = a.ZIP;
/
   
INSERT INTO STORE  
SELECT ROW_NUMBER() OVER (ORDER BY rsq.STORENAME) AS STOREID, rsq.STORENAME, rsq.PHONE, a.ADDRESSID
FROM ADDRESS a INNER JOIN
     (SELECT rs.STORENAME, rs.PHONE, c.CITY, c.STATE, rs.ZIPCODE, rs.ADDRESS, c.COUNTRY
        FROM BIKE_SHOP.RETAILSTORE rs INNER JOIN
             BIKE_SHOP.CITY c ON rs.CITYID = c.CITYID) rsq ON rsq.ADDRESS = a.ADDRESS AND rsq.ZIPCODE = a.ZIP
             AND rsq.CITY = a.CITY AND rsq.STATE = a.STATE AND rsq.COUNTRY = a.COUNTRY; 
/
             
INSERT INTO WAREHOUSEEMPLOYEE
SELECT e.EMPLOYEEID, e.FIRSTNAME || ' ' || e.LASTNAME AS EMPLOYEENAME, e.HOMEPHONE, e.DATEHIRED, e.DATERELEASED, a.ADDRESSID
FROM BIKE_SHOP.EMPLOYEE e INNER JOIN
     ADDRESS a ON e.ADDRESS = a.ADDRESS AND e.ZIPCODE = a.ZIP;
/
     
INSERT INTO COMPONENT
SELECT ROW_NUMBER() OVER (ORDER BY bp.COMPONENTID) AS NEWID, bp.QUANTITY, c.LISTPRICE, bp.DATEINSTALLED, b.SERIALNUMBER, e.EMPLOYEEID, p.PARTID
FROM BIKE_SHOP.BIKEPARTS bp INNER JOIN
     BIKE_SHOP.COMPONENT c ON bp.COMPONENTID = c.COMPONENTID
     INNER JOIN BICYCLE b ON b.SERIALNUMBER = bp.SERIALNUMBER
     INNER JOIN WAREHOUSEEMPLOYEE e ON e.EMPLOYEEID = bp.EMPLOYEEID
     INNER JOIN PART p ON p.PARTID = bp.COMPONENTID;
/
             
  
INSERT INTO PURCHASE 
SELECT ROW_NUMBER() OVER (ORDER BY b.SERIALNUMBER) AS NEWID, b.LISTPRICE, b.SALEPRICE, b.SALESTAX, b.SHIPPRICE, b.ORDERDATE, b.STARTDATE, b.SHIPDATE,
                                                             bw.SERIALNUMBER, c.CUSTOMERID, s.STOREID, e.EMPLOYEEID
FROM BIKE_SHOP.BICYCLE b
     INNER JOIN BIKE_SHOP.RETAILSTORE rs ON b.STOREID = rs.STOREID
     INNER JOIN STORE s ON rs.STORENAME = s.STORENAME AND rs.PHONE = s.PHONE
     INNER JOIN BICYCLE bw ON bw.SERIALNUMBER = b.SERIALNUMBER
     INNER JOIN WAREHOUSECUSTOMER c ON c.CUSTOMERID = b.CUSTOMERID
     INNER JOIN WAREHOUSEEMPLOYEE e ON e.EMPLOYEEID = b.EMPLOYEEID;
/
COMMIT;
/